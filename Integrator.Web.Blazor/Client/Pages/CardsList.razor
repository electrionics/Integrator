@page "/cards"

@using Integrator.Web.Blazor.Shared
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups

@inject HttpClient Http


<PageTitle>Загруженные карточки товаров</PageTitle>

<h1>Загруженные карточки товаров</h1>

<p>Загруженные карчточки товаров с первично размеченными брендами и категориями.</p><br/>

@if (cards == null)
{
    <p><em>Загрузка карточек...</em></p>
}
else
{
    <SfButton OnClick="ToggleExpanded" Content="@(ExpandedText ? "Сократить текст" : "Развернуть текст")"/>

    <SfGrid ID="CardsGrid"
        AllowFiltering="true" 
        AllowSorting="true" 
        AllowPaging="true"
        AllowGrouping="true"
        AllowTextWrap="true"
        DataSource="@cards" 
        TValue="CardViewModel">
        <GridPageSettings PageSize="50"/>
        <GridFilterSettings Type="FilterType.Excel"/>
        <GridColumns>
            @* Width="120"  *@
            <GridColumn Field="@nameof(CardViewModel.ShopName)"
                        HeaderText="Магазин"
                        
                        AllowFiltering="true" />@* Width="100" *@
            <GridColumn Field="@nameof(CardViewModel.CardId)"
                        HeaderText="Номер карточки"
                        
                        AllowFiltering="true"
                        AllowGrouping="false">
            </GridColumn>@* Width="200" *@
            <GridColumn Field="@nameof(CardViewModel.CardPathSource)"
                        HeaderText="Путь карточки (исходн.)"
                        
                        AllowFiltering="true"
                        AllowGrouping="true" />@* Width="200" *@
            <GridColumn Field="@nameof(CardViewModel.CardPathEng)"
                        HeaderText="Путь карточки (англ.)"
                        
                        AllowFiltering="true"
                        AllowGrouping="true" />@* Width="100" *@
            <GridColumn Field="@nameof(CardViewModel.ImageUrls)"
                        HeaderText="Изображения"
                        
                        AllowFiltering="false"
                        AllowGrouping="false">
                <Template>
                    @{
                        var model = (CardViewModel)context;
                        if (model.ImageUrls.Count > 0)
                        {
                            <img width="100" src="@model.ImageUrls[0]" @onclick="() => ShowImagesPopup(model.ImageUrls)" style="cursor: pointer;" />
                        }
                        else
                        {
                            <text>Нет изображений</text>
                        }
                    }
                </Template>
            </GridColumn>@* Width="130" *@
            <GridColumn Field="@nameof(CardViewModel.CategoryName)"
                        HeaderText="Категория"
                        
                        AllowFiltering="true"
                        AllowGrouping="true" />@* Width="100" *@
            <GridColumn Field="@nameof(CardViewModel.BrandName)"
                        HeaderText="Бренд"
                        
                        AllowFiltering="true"
                        AllowGrouping="true">
            </GridColumn>@* Width="100" *@
            <GridColumn Field="@nameof(CardViewModel.Price)"
                        HeaderText="Цена"
                        
                        AllowFiltering="true"
                        AllowGrouping="true" />@* Width="100" *@
            <GridColumn Field="@nameof(CardViewModel.Color)"
                        HeaderText="Цвет"
                        
                        AllowFiltering="true"
                        AllowGrouping="true">
            </GridColumn>@* Width="120" *@
            <GridColumn Field="@nameof(CardViewModel.SizeStr)"
                        HeaderText="Размеры"
                        
                        AllowFiltering="true"
                        AllowGrouping="true">
            </GridColumn>@* Width="150" *@
            <GridColumn Field="@nameof(CardViewModel.Information)"
                        HeaderText="Информация"
                        
                        AllowFiltering="true"
                        AllowGrouping="true">
            </GridColumn>@* Width="250" *@
            <GridColumn Field="@nameof(CardViewModel.SourceContent)"
                        HeaderText="Описание (исходн.)"
                        
                        AllowFiltering="true"
                        AllowGrouping="true">
                <Template>
                    @{
                        var model = (CardViewModel)context;
                        <text>
                            @(model.SourceContent.Length > CollapsedMaxLength && !ExpandedText
                            ? model.SourceContent.Substring(0, CollapsedMaxLength) + "..."
                            : model.SourceContent)
                        </text>
                    }
                </Template>
            </GridColumn>@* Width="300" *@
            <GridColumn Field="@nameof(CardViewModel.EngContent)"
                        HeaderText="Описание (англ.)"
                        
                        AllowFiltering="true"
                        AllowGrouping="true">
                <Template>
                    @{
                        var model = (CardViewModel)context;
                        <text>
                            @(model.EngContent.Length > CollapsedMaxLength && !ExpandedText
                            ? model.EngContent.Substring(0, CollapsedMaxLength) + "..."
                            : model.EngContent)
                        </text>
                    }
                </Template>
            </GridColumn>@* Width="300" *@
            <GridColumn Field="@nameof(CardViewModel.RusContent)"
                        HeaderText="Описание (рус.)"
                        
                        AllowFiltering="true"
                        AllowGrouping="true">
                <Template>
                    @{
                        var model = (CardViewModel)context;
                        <text>@(model.RusContent.Length > CollapsedMaxLength && !ExpandedText 
                            ? model.RusContent.Substring(0, CollapsedMaxLength) + "..." 
                            : model.RusContent)
                        </text>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>

    <SfDialog Width="630px" IsModal="true" @bind-Visible="@ImagesVisible" ShowCloseIcon="true" CloseOnEscape="true" >
        <DialogAnimationSettings Effect="DialogEffect.FadeZoom"/>
        <DialogEvents OnOverlayModalClick="@OverlayClick"/>
        <DialogTemplates>
            <Header>
                Изображения карточки
            </Header>
            <Content>
                    @{
                        var counter = 0;
                        foreach (var url in ImageUrls)
                        {
                            <a href="@url" target="_blank">
                                <img width="200" src="@url" />
                            </a>
                            counter++;
                            if (counter % 3 == 0)
                            {
                                <br />
                            }
                        }
                    }
            </Content>
        </DialogTemplates>
    </SfDialog>
}

@code {
    private CardViewModel[]? cards;

    private bool ExpandedText { get; set; } = false;
    private const int CollapsedMaxLength = 80;

    protected override async Task OnInitializedAsync()
    {
        cards = await Http.GetFromJsonAsync<CardViewModel[]>("Cards/GetList");
    }

    private void ToggleExpanded()
    {
        ExpandedText = !ExpandedText;
    }


    private bool ImagesVisible { get; set; }
    private List<string> ImageUrls{ get; set; }

    private void ShowImagesPopup(List<string> imageUrls)
    {
        ImagesVisible = true;
        ImageUrls = imageUrls;
    }

    private void OverlayClick(OverlayModalClickEventArgs args)
    {
        ImagesVisible = false;
    }
}
